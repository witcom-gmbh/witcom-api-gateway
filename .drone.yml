global-variables:
  environment: &default_environment
    REGISTRY:
      from_secret: artifactory-host-01
    REGISTRY_HELM_PROJECT:  
      from_secret: artifactory-helm-project-01 
    USERNAME:
      from_secret: artifactory-user-01
    PASSWORD:
      from_secret: artifactory-password-01
    REGISTRY_ORG: witcom
    REGISTRY_ARTIFACT: witcom-api-gateway
    API_GW_OAUTH_TESTCLIENT_CLIENTSECRET: verysecret
    API_GW_OAUTH_TESTCLIENT_CLIENTID: api-gw-test-client

kind: pipeline
type: docker
name: default
platform:
  os: linux
  arch: amd64 

steps:

  #  we just take the dependencies-section from the pom-files to build our cache-key
  - name: build dependency-cache-checksum-file
    image: alpine/xml
    commands:
    - xq -r .project.dependencies < ./pom.xml > dependencies.json

  - name: restore-cache
    image: meltwater/drone-cache
    volumes:
    - name: cache
      path: /drone/cache
    environment:
      AWS_ACCESS_KEY_ID:
        from_secret: s3_cache_access_key_id
      AWS_SECRET_ACCESS_KEY:
        from_secret: s3_cache_access_key_secret
    pull: true
    settings:
      cache_key: '{{ checksum "./dependencies.json" }}'
      restore: true
      bucket: drone-gh-01
      region: us-east-1
      endpoint: https://s3.witcom.cloud
      path_style: true
      mount:
        - '/drone/cache'

  - name: Wait until services are ready
    image: appropriate/curl
    commands:
    - curl -4 -fsS -m 10 --retry 10 --retry-connrefused -o /dev/null -XPUT http://mockserver:1080/mockserver/status
    - curl -4 -fsS -m 10 --retry 10 --retry-connrefused -o /dev/null http://keycloak:9999

  - name: Wait until redis service is ready
    image: appropriate/nc
    commands:
    - nc -vz -w 30 redis 6379

  - name: Fix permissions on build-cache directory
    image: alpine
    volumes:  
    - name: cache
      path: /drone/cache
    commands:
    - chown -R 1001:0 /drone/cache && chmod -R g+=wrx /drone/cache

  - name: Lint helm chart
    image: alpine/helm:3.10.2
    environment:
      <<: *default_environment
    commands:
    - echo "Linting helm chart"
    - cd ./deployment/witcom-api-gateway && helm lint

  - name: Full test
    image: maven:3-eclipse-temurin-17
    environment:
      <<: *default_environment
    volumes:
    - name: cache
      path: /drone/cache
    commands:
    - mvn install -DskipTests=true -Dmaven.javadoc.skip=true -B -V -Dmaven.repo.local=/drone/cache
    - mvn -Ptest-fast test -B -Dmaven.repo.local=/drone/cache

  - name: rebuild-cache
    image: meltwater/drone-cache
    volumes:
    - name: cache
      path: /drone/cache
    pull: true
    environment:
      AWS_ACCESS_KEY_ID:
        from_secret: s3_cache_access_key_id
      AWS_SECRET_ACCESS_KEY:
        from_secret: s3_cache_access_key_secret
    settings:
      rebuild: true
      cache_key: '{{ checksum "./dependencies.json" }}'
      bucket: drone-gh-01
      region: us-east-1
      endpoint: https://s3.witcom.cloud
      path_style: true
      mount:
        - '/drone/cache'

  - name: Maven build
    image: maven:3-eclipse-temurin-17
    environment:
      <<: *default_environment
    volumes:
    - name: build-output
      path: /app-build
    - name: cache
      path: /drone/cache
    commands:
    - mvn package -DskipTests=true -B -Dmaven.repo.local=/drone/cache
    - cp target/witcom-api-gateway-*.jar /app-build/app.jar
    when:
      event:
      - push
      - tag

  - name: Prepare registry secrets
    image: alpine
    volumes:  
    - name: dockerconfig
      path: /dockerconfig
    environment:
      DOCKER_CONFIG:
        from_secret: artifactory-dockerconfig-01
    commands:
    - echo "$DOCKER_CONFIG" > /dockerconfig/config.json

  - name: Build image and push to latest
    image: gcr.io/kaniko-project/executor:debug
    environment:
      <<: *default_environment
    volumes:
    - name: build-output
      path: /app-build
    - name: dockerconfig
      path: /kaniko/.docker
    commands:
    - >
      /kaniko/executor 
      --context /app-build 
      --dockerfile Dockerfile
      --destination $${REGISTRY}/$${REGISTRY_ORG}/$${REGISTRY_ARTIFACT}:latest
      # --no-push  
    when:
      event:
        exclude:
        - tag
        include:
        - push
      branch:
      - main

  - name: Build and release image
    image: gcr.io/kaniko-project/executor:debug
    environment:
      <<: *default_environment
    volumes:
    - name: build-output
      path: /app-build
    - name: dockerconfig
      path: /kaniko/.docker
    commands:
    - >
      /kaniko/executor 
      --context /app-build 
      --dockerfile Dockerfile
      --destination $${REGISTRY}/$${REGISTRY_ORG}/$${REGISTRY_ARTIFACT}:latest
      --destination $${REGISTRY}/$${REGISTRY_ORG}/$${REGISTRY_ARTIFACT}:${DRONE_TAG}
    when:
      event:
      - tag
      ref:
      - refs/tags/v*

# only on release
  - name: Package and deploy chart
    image: alpine/helm:3.10.2
    environment:
      <<: *default_environment
    commands:
    - helm registry login $${REGISTRY} -u $${USERNAME} -p $${PASSWORD}
    - cd ./deployment/witcom-api-gateway
    - helm package .
    - helm push *.tgz oci://$${REGISTRY}/$${REGISTRY_HELM_PROJECT}
    - helm registry logout $${REGISTRY}
    when:
      event:
      - tag
      ref:
      - refs/tags/v*    

services:


# keycloak
  - name: keycloak
    image: quay.io/keycloak/keycloak:21.1
    commands:
    - mkdir -p /opt/keycloak/data/import && cp /drone/src/.devcontainer/keycloak-import/*.json /opt/keycloak/data/import/
    - /opt/keycloak/bin/kc.sh start-dev --import-realm
    environment:
      <<: *default_environment    
      KC_HTTP_PORT: 9999
      KC_PROXY: edge

# mockserver
  - name: mockserver
    image: mockserver/mockserver:5.15.0
    environment:
      <<: *default_environment    
      MOCKSERVER_INITIALIZATION_JSON_PATH: /drone/src/.devcontainer/mockserver-expectations/[A-z0-9_]*.json
      MOCKSERVER_WATCH_INITIALIZATION_JSON: true

# redis
  - name: redis
    image: redis:6.0

volumes:
- name: shared
  temp: {}
- name: build-output
  temp: {}
- name: dockerconfig
  temp: {}
- name: cache
  temp: {}

trigger:
  event:
  - tag
  - push
  - pull_request